{"ast":null,"code":"import _slicedToArray from\"/Users/ashleywarden/Documents/projects/weather-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState}from'react';import Conditions from'./Conditions';import classes from'./Forecast.module.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Forecast=function Forecast(){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),city=_useState2[0],setCity=_useState2[1];var _useState3=useState('imperial'),_useState4=_slicedToArray(_useState3,2),unit=_useState4[0],setUnit=_useState4[1];//this sets imperial as the default unit\nvar _useState5=useState({}),_useState6=_slicedToArray(_useState5,2),responseObj=_useState6[0],setResponseObj=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),error=_useState8[0],setError=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),loading=_useState10[0],setLoading=_useState10[1];var getForecast=function getForecast(e){e.preventDefault();if(city.length===0){return setError(true);}setError(false);setResponseObj({});setLoading(true);var uriEncodedCity=encodeURIComponent(city);fetch(\"https://community-open-weather-map.p.rapidapi.com/weather?units=\".concat(unit,\"&q=\").concat(uriEncodedCity),{\"method\":\"GET\",\"headers\":{\"x-rapidapi-key\":\"e67776521cmshd88d4bf5e0c8e46p16cc0fjsn0bd91cdc12f0\",\"x-rapidapi-host\":\"community-open-weather-map.p.rapidapi.com\"}}).then(function(response){return response.json();}).then(function(response){if(response.cod!==200){throw new Error();}setResponseObj(response);setLoading(false);}).catch(function(err){setError(true);setLoading(false);console.log(err.message);});};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Find Current Weather Conditions\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:getForecast,children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Enter City\",maxLength:\"50\",className:classes.textInput,value:city,onChange:function onChange(e){return setCity(e.target.value);}}),/*#__PURE__*/_jsxs(\"label\",{className:classes.Radio,children:[/*#__PURE__*/_jsx(\"input\",{type:\"radio\",name:\"units\",checked:unit===\"imperial\",value:\"imperial\",onChange:function onChange(e){return setUnit(e.target.value);}}),\"Fahrenheit\"]}),/*#__PURE__*/_jsxs(\"label\",{className:classes.Radio,children:[/*#__PURE__*/_jsx(\"input\",{type:\"radio\",name:\"units\",checked:unit===\"metric\",value:\"metric\",onChange:function onChange(e){return setUnit(e.target.value);}}),\"Celcius\"]}),/*#__PURE__*/_jsx(\"button\",{className:classes.Button,type:\"submit\",children:\"Get Forecast\"})]}),/*#__PURE__*/_jsx(Conditions,{responseObj:responseObj,error:error,loading:loading})]});};export default Forecast;","map":{"version":3,"sources":["/Users/ashleywarden/Documents/projects/weather-app/src/components/Forecast/Forecast.js"],"names":["useState","Conditions","classes","Forecast","city","setCity","unit","setUnit","responseObj","setResponseObj","error","setError","loading","setLoading","getForecast","e","preventDefault","length","uriEncodedCity","encodeURIComponent","fetch","then","response","json","cod","Error","catch","err","console","log","message","textInput","target","value","Radio","Button"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport Conditions from './Conditions'\nimport classes from './Forecast.module.css'\n\nconst Forecast = () => {\n\n    let [city, setCity] = useState('')\n    let [unit, setUnit] = useState('imperial') //this sets imperial as the default unit\n    let [responseObj, setResponseObj] = useState({})\n    let [error, setError] = useState(false)\n    let [loading, setLoading] = useState(false)\n\n\n    const getForecast = (e) => {\n\n        e.preventDefault()\n\n        if (city.length === 0){\n            return setError(true)\n        }\n\n        setError(false)\n        setResponseObj({})\n\n        setLoading(true)\n\n        const uriEncodedCity = encodeURIComponent(city)\n\n        fetch(`https://community-open-weather-map.p.rapidapi.com/weather?units=${unit}&q=${uriEncodedCity}`, {\n            \"method\": \"GET\",\n            \"headers\": {\n                \"x-rapidapi-key\": \"e67776521cmshd88d4bf5e0c8e46p16cc0fjsn0bd91cdc12f0\",\n                \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\"\n            }\n        })\n        .then(response => response.json())\n        .then(response => {\n            if (response.cod !== 200) {\n                throw new Error()\n            }\n    \n            setResponseObj(response);\n            setLoading(false);\n        })\n        .catch(err => {\n            setError(true);\n            setLoading(false);\n            console.log(err.message);\n        });\n\n    }\n\n    return (\n        <div>\n            <h2>Find Current Weather Conditions</h2>\n            <form onSubmit={getForecast}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Enter City\"\n                    maxLength=\"50\"\n                    className={classes.textInput}\n                    value={city}\n                    onChange={(e) => setCity(e.target.value)}\n                    />\n                <label className={classes.Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"imperial\"}\n                        value=\"imperial\"\n                        onChange={(e) => setUnit(e.target.value)}\n                        />\n                    Fahrenheit\n                </label>\n                <label className={classes.Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"metric\"}\n                        value=\"metric\"\n                        onChange={(e) => setUnit(e.target.value)}\n                        />\n                    Celcius\n                </label>\n\n                <button className={classes.Button} type=\"submit\">Get Forecast</button>\n            </form>\n            <Conditions\n               responseObj={responseObj}\n               error={error}\n               loading={loading}\n               />\n        </div>\n    )\n}\n\nexport default Forecast\n"]},"metadata":{},"sourceType":"module"}