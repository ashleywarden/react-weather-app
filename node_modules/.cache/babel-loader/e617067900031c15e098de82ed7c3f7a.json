{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Conditions from './Conditions';\nimport classes from './Forecast.module.css';\n\nconst Forecast = initialUrl => {\n  _s();\n\n  let [city, setCity] = useState('');\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(null);\n  const [url, setUrl] = useState(initialUrl); //because url will change every time user searches a new city\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetch(url).then(response => response.json()).then(data => {\n      setIsLoading(false);\n      setData(data);\n    }).catch(error => {\n      setIsLoading(false);\n      setError(error);\n      console.log(error);\n    }); //dependency array\n  }, [url]);\n  return {\n    data,\n    error,\n    isLoading,\n    setUrl\n  };\n};\n/**const getForecast = (e) => {\n     e.preventDefault()\n     if (city.length === 0){\n        return setError(true)\n    }\n     setError(false)\n    setResponseObj({})\n     setLoading(true)\n     const uriEncodedCity = encodeURIComponent(city)\n     fetch(`https://community-open-weather-map.p.rapidapi.com/weather?units=metric&q=${uriEncodedCity}`, {\n        \"method\": \"GET\",\n        \"headers\": {\n            \"x-rapidapi-key\": \"e67776521cmshd88d4bf5e0c8e46p16cc0fjsn0bd91cdc12f0\",\n            \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\"\n        }\n    })\n    .then(response => response.json())\n    .then(response => {\n        if (response.cod !== 200) {\n            throw new Error()\n        }\n\n        setResponseObj(response);\n        setLoading(false);\n    })\n    .catch(err => {\n        setError(true);\n        setLoading(false);\n        console.log(err.message);\n    });\n }\n getForecast.defaultProps ={\n    uriEncodedCity: 'vancouver'\n}\n return (\n    <div>\n        <form onSubmit={getForecast}>\n            <input\n                type=\"text\"\n                placeholder=\"Enter City\"\n                maxLength=\"50\"\n                className={classes.textInput}\n                value={city}\n                onChange={(e) => setCity(e.target.value)}\n                />\n             <button className={classes.Button} type=\"submit\">Get Current Weather</button>\n        </form>\n        <Conditions\n           responseObj={responseObj}\n           />\n        \n    </div>\n)**/\n\n\n_s(Forecast, \"s3qhG0HeJhcvzjl5Shz2oaphCK0=\");\n\n_c = Forecast;\nexport default Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/Users/ashleywarden/Documents/projects/weather-app/src/components/Current-Weather/Forecast.js"],"names":["useState","useEffect","Conditions","classes","Forecast","initialUrl","city","setCity","data","setData","error","setError","isLoading","setIsLoading","url","setUrl","fetch","then","response","json","catch","console","log"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,OAAP,MAAoB,uBAApB;;AAEA,MAAMC,QAAQ,GAAIC,UAAD,IAAgB;AAAA;;AAEzB,MAAI,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACc,GAAD,EAAMC,MAAN,IAAgBf,QAAQ,CAACK,UAAD,CAA9B,CANyB,CAMkB;;AAE3CJ,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,YAAY,CAAC,IAAD,CAAZ;AAEAG,IAAAA,KAAK,CAACF,GAAD,CAAL,CACKG,IADL,CACWC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADxB,EAEKF,IAFL,CAEWT,IAAD,IAAU;AACZK,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAJ,MAAAA,OAAO,CAACD,IAAD,CAAP;AACH,KALL,EAMKY,KANL,CAMYV,KAAD,IAAW;AACdG,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACAW,MAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAZ;AACH,KAVL,EAHY,CAcZ;AACH,GAfQ,EAeN,CAACI,GAAD,CAfM,CAAT;AAiBA,SAAO;AAAEN,IAAAA,IAAF;AAAQE,IAAAA,KAAR;AAAeE,IAAAA,SAAf;AAA0BG,IAAAA;AAA1B,GAAP;AACH,CA1BL;AA4BI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAhFMX,Q;;KAAAA,Q;AA4FN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport Conditions from './Conditions'\nimport classes from './Forecast.module.css'\n\nconst Forecast = (initialUrl) => {\n\n        let [city, setCity] = useState('')\n        const [data, setData] = useState(null)\n        const [error, setError] = useState(null)\n        const [isLoading, setIsLoading] = useState(null)\n        const [url, setUrl] = useState(initialUrl) //because url will change every time user searches a new city\n    \n        useEffect(() => {\n            setIsLoading(true)\n    \n            fetch(url)\n                .then((response) => response.json())\n                .then((data) => {\n                    setIsLoading(false)\n                    setData(data)\n                })\n                .catch((error) => {\n                    setIsLoading(false)\n                    setError(error)\n                    console.log(error)\n                })\n            //dependency array\n        }, [url])\n    \n        return { data, error, isLoading, setUrl }\n    }\n\n    /**const getForecast = (e) => {\n\n        e.preventDefault()\n\n        if (city.length === 0){\n            return setError(true)\n        }\n\n        setError(false)\n        setResponseObj({})\n\n        setLoading(true)\n\n        const uriEncodedCity = encodeURIComponent(city)\n\n        fetch(`https://community-open-weather-map.p.rapidapi.com/weather?units=metric&q=${uriEncodedCity}`, {\n            \"method\": \"GET\",\n            \"headers\": {\n                \"x-rapidapi-key\": \"e67776521cmshd88d4bf5e0c8e46p16cc0fjsn0bd91cdc12f0\",\n                \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\"\n            }\n        })\n        .then(response => response.json())\n        .then(response => {\n            if (response.cod !== 200) {\n                throw new Error()\n            }\n    \n            setResponseObj(response);\n            setLoading(false);\n        })\n        .catch(err => {\n            setError(true);\n            setLoading(false);\n            console.log(err.message);\n        });\n\n    }\n\n    getForecast.defaultProps ={\n        uriEncodedCity: 'vancouver'\n    }\n\n    return (\n        <div>\n            <form onSubmit={getForecast}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Enter City\"\n                    maxLength=\"50\"\n                    className={classes.textInput}\n                    value={city}\n                    onChange={(e) => setCity(e.target.value)}\n                    />\n\n                <button className={classes.Button} type=\"submit\">Get Current Weather</button>\n            </form>\n            <Conditions\n               responseObj={responseObj}\n               />\n            \n        </div>\n    )**/\n\nexport default Forecast\n"]},"metadata":{},"sourceType":"module"}