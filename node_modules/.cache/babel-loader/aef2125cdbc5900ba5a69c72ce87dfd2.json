{"ast":null,"code":"/**import { useState } from 'react'\nimport Conditions from './Conditions'\nimport classes from './Forecast.module.css'\n\nconst Forecast = (initialUrl) => {\n\n    let [city, setCity] = useState('')\n    let [responseObj, setResponseObj] = useState({})\n    const [url, setUrl] = useState(initialUrl) //because url will change every time user searches a new city\n\n\n    const getForecast = (e) => {\n\n        e.preventDefault()\n        setResponseObj({})\n\n\n        const uriEncodedCity = encodeURIComponent(city)\n\n        fetch(`https://community-open-weather-map.p.rapidapi.com/weather?units=metric&q=${uriEncodedCity}`, {\n            \"method\": \"GET\",\n            \"headers\": {\n                \"x-rapidapi-key\": \"e67776521cmshd88d4bf5e0c8e46p16cc0fjsn0bd91cdc12f0\",\n                \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\"\n            }\n        })\n        .then(response => response.json())\n        .then(response => {\n            if (response.cod !== 200) {\n                throw new Error()\n            }\n    \n            setResponseObj(response);\n        })\n        .catch(err => {\n            console.log(err.message);\n        });\n\n    }\n\n    getForecast.defaultProps ={\n        uriEncodedCity: 'vancouver'\n    }\n\n    return (\n        {data, setUrl}\n        /*<div>\n            <form onSubmit={getForecast}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Enter City\"\n                    maxLength=\"50\"\n                    className={classes.textInput}\n                    value={city}\n                    onChange={(e) => setCity(e.target.value)}\n                    />\n\n                <button className={classes.Button} type=\"submit\">Get Current Weather</button>\n            </form>\n            <Conditions\n               responseObj={responseObj}\n               />\n            \n        </div>*/\n//)\n//}\n//export default Forecast","map":{"version":3,"sources":["/Users/ashleywarden/Documents/projects/weather-app/src/components/Current-Weather/Forecast.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AAEA","sourcesContent":["/**import { useState } from 'react'\nimport Conditions from './Conditions'\nimport classes from './Forecast.module.css'\n\nconst Forecast = (initialUrl) => {\n\n    let [city, setCity] = useState('')\n    let [responseObj, setResponseObj] = useState({})\n    const [url, setUrl] = useState(initialUrl) //because url will change every time user searches a new city\n\n\n    const getForecast = (e) => {\n\n        e.preventDefault()\n        setResponseObj({})\n\n\n        const uriEncodedCity = encodeURIComponent(city)\n\n        fetch(`https://community-open-weather-map.p.rapidapi.com/weather?units=metric&q=${uriEncodedCity}`, {\n            \"method\": \"GET\",\n            \"headers\": {\n                \"x-rapidapi-key\": \"e67776521cmshd88d4bf5e0c8e46p16cc0fjsn0bd91cdc12f0\",\n                \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\"\n            }\n        })\n        .then(response => response.json())\n        .then(response => {\n            if (response.cod !== 200) {\n                throw new Error()\n            }\n    \n            setResponseObj(response);\n        })\n        .catch(err => {\n            console.log(err.message);\n        });\n\n    }\n\n    getForecast.defaultProps ={\n        uriEncodedCity: 'vancouver'\n    }\n\n    return (\n        {data, setUrl}\n        /*<div>\n            <form onSubmit={getForecast}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Enter City\"\n                    maxLength=\"50\"\n                    className={classes.textInput}\n                    value={city}\n                    onChange={(e) => setCity(e.target.value)}\n                    />\n\n                <button className={classes.Button} type=\"submit\">Get Current Weather</button>\n            </form>\n            <Conditions\n               responseObj={responseObj}\n               />\n            \n        </div>*/\n    //)\n//}\n\n//export default Forecast\n"]},"metadata":{},"sourceType":"module"}