{"ast":null,"code":"var _jsxFileName = \"/Users/ashleywarden/Documents/projects/weather-app/src/components/Forecast/Forecast.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport Conditions from './Conditions';\nimport classes from './Forecast.module.css';\nimport Searchbar from './Searchbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Forecast = () => {\n  _s();\n\n  let [city, setCity] = useState('');\n  let [responseObj, setResponseObj] = useState({});\n  let [error, setError] = useState(false);\n  let [loading, setLoading] = useState(false);\n\n  const getForecast = e => {\n    e.preventDefault();\n\n    if (city.length === 0) {\n      return setError(true);\n    }\n\n    setError(false);\n    setResponseObj({});\n    setLoading(true);\n    const uriEncodedCity = encodeURIComponent(city);\n    fetch(`https://community-open-weather-map.p.rapidapi.com/weather?units=metric&q=${uriEncodedCity}`, {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-key\": \"e67776521cmshd88d4bf5e0c8e46p16cc0fjsn0bd91cdc12f0\",\n        \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\"\n      }\n    }).then(response => response.json()).then(response => {\n      if (response.cod !== 200) {\n        throw new Error();\n      }\n\n      setResponseObj(response);\n      setLoading(false);\n    }).catch(err => {\n      setError(true);\n      setLoading(false);\n      console.log(err.message);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Searchbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 1\n  }, this);\n};\n\n_s(Forecast, \"p1azajmyFJTg2Y73UmBSG55BTMg=\");\n\n_c = Forecast;\nexport default Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/Users/ashleywarden/Documents/projects/weather-app/src/components/Forecast/Forecast.js"],"names":["useState","Conditions","classes","Searchbar","Forecast","city","setCity","responseObj","setResponseObj","error","setError","loading","setLoading","getForecast","e","preventDefault","length","uriEncodedCity","encodeURIComponent","fetch","then","response","json","cod","Error","catch","err","console","log","message"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAEnB,MAAI,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAA9B;AACA,MAAI,CAACO,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,EAAD,CAA5C;AACA,MAAI,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,KAAD,CAAhC;AACA,MAAI,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,KAAD,CAApC;;AAGA,QAAMa,WAAW,GAAIC,CAAD,IAAO;AAEvBA,IAAAA,CAAC,CAACC,cAAF;;AAEA,QAAIV,IAAI,CAACW,MAAL,KAAgB,CAApB,EAAsB;AAClB,aAAON,QAAQ,CAAC,IAAD,CAAf;AACH;;AAEDA,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACAF,IAAAA,cAAc,CAAC,EAAD,CAAd;AAEAI,IAAAA,UAAU,CAAC,IAAD,CAAV;AAEA,UAAMK,cAAc,GAAGC,kBAAkB,CAACb,IAAD,CAAzC;AAEAc,IAAAA,KAAK,CAAE,4EAA2EF,cAAe,EAA5F,EAA+F;AAChG,gBAAU,KADsF;AAEhG,iBAAW;AACP,0BAAkB,oDADX;AAEP,2BAAmB;AAFZ;AAFqF,KAA/F,CAAL,CAOCG,IAPD,CAOMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAPlB,EAQCF,IARD,CAQMC,QAAQ,IAAI;AACd,UAAIA,QAAQ,CAACE,GAAT,KAAiB,GAArB,EAA0B;AACtB,cAAM,IAAIC,KAAJ,EAAN;AACH;;AAEDhB,MAAAA,cAAc,CAACa,QAAD,CAAd;AACAT,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAfD,EAgBCa,KAhBD,CAgBOC,GAAG,IAAI;AACVhB,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACAE,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAe,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB;AACH,KApBD;AAsBH,GArCD;;AAuCA,sBACJ;AAAA,2BACI,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADI;AAKH,CApDD;;GAAMzB,Q;;KAAAA,Q;AAsDN,eAAeA,QAAf","sourcesContent":["import { useState } from 'react'\nimport Conditions from './Conditions'\nimport classes from './Forecast.module.css'\nimport Searchbar from './Searchbar'\n\nconst Forecast = () => {\n\n    let [city, setCity] = useState('')\n    let [responseObj, setResponseObj] = useState({})\n    let [error, setError] = useState(false)\n    let [loading, setLoading] = useState(false)\n\n\n    const getForecast = (e) => {\n\n        e.preventDefault()\n\n        if (city.length === 0){\n            return setError(true)\n        }\n\n        setError(false)\n        setResponseObj({})\n\n        setLoading(true)\n\n        const uriEncodedCity = encodeURIComponent(city)\n\n        fetch(`https://community-open-weather-map.p.rapidapi.com/weather?units=metric&q=${uriEncodedCity}`, {\n            \"method\": \"GET\",\n            \"headers\": {\n                \"x-rapidapi-key\": \"e67776521cmshd88d4bf5e0c8e46p16cc0fjsn0bd91cdc12f0\",\n                \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\"\n            }\n        })\n        .then(response => response.json())\n        .then(response => {\n            if (response.cod !== 200) {\n                throw new Error()\n            }\n    \n            setResponseObj(response);\n            setLoading(false);\n        })\n        .catch(err => {\n            setError(true);\n            setLoading(false);\n            console.log(err.message);\n        });\n\n    }\n\n    return (\n<div>\n    <Searchbar />\n</div>\n    )\n}\n\nexport default Forecast\n"]},"metadata":{},"sourceType":"module"}