{"ast":null,"code":"var _jsxFileName = \"/Users/ashleywarden/Documents/projects/weather-app/src/components/Forecast/FiveDayForecastTest.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FiveDayForecastTest() {\n  _s();\n\n  const [users, setUsers] = useState([]);\n  const [temp, setTemp] = useState([]);\n  useEffect(() => {\n    axios.get(`https://community-open-weather-map.p.rapidapi.com/forecast?q=vancouver&units=metric`, {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-key\": \"e67776521cmshd88d4bf5e0c8e46p16cc0fjsn0bd91cdc12f0\",\n        \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\"\n      }\n    }) //response.list.filter(reading => reading.dt_txt.includes(\"18:00:00\"))))\n    .then(response => {\n      const [temp] = response.data.filter(reading => reading.dt_txt.includes(\"18:00:00\"));\n      setUsers(temp);\n    }).catch(err => {\n      console.log(err.message);\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: users.map((user, index) => /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [user.list.map((list, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: list\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 53\n      }, this)), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: user.list.main\n      }, user.list.dt, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 21\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FiveDayForecastTest, \"4P9O07KT1HCrOtczHMD5YQo0VH0=\");\n\n_c = FiveDayForecastTest;\nexport default FiveDayForecastTest;\n\nvar _c;\n\n$RefreshReg$(_c, \"FiveDayForecastTest\");","map":{"version":3,"sources":["/Users/ashleywarden/Documents/projects/weather-app/src/components/Forecast/FiveDayForecastTest.js"],"names":["React","useEffect","useState","axios","FiveDayForecastTest","users","setUsers","temp","setTemp","get","then","response","data","filter","reading","dt_txt","includes","catch","err","console","log","message","map","user","index","list","main","dt"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,mBAAT,GAA+B;AAAA;;AAE3B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AAEJD,EAAAA,SAAS,CAAC,MAAM;AAChBE,IAAAA,KAAK,CAACM,GAAN,CAAW,qFAAX,EAAiG;AAC7F,gBAAU,KADmF;AAE7F,iBAAW;AACP,0BAAkB,oDADX;AAEP,2BAAmB;AAFZ;AAFkF,KAAjG,EAOI;AAPJ,KAQKC,IARL,CAQUC,QAAQ,IAAI;AACd,YAAM,CAACJ,IAAD,IAAUI,QAAQ,CAACC,IAAT,CAAcC,MAAd,CAAqBC,OAAO,IAAIA,OAAO,CAACC,MAAR,CAAeC,QAAf,CAAwB,UAAxB,CAAhC,CAAhB;AACAV,MAAAA,QAAQ,CAACC,IAAD,CAAR;AACH,KAXL,EAYKU,KAZL,CAYWC,GAAG,IAAI;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB;AACH,KAdL;AAeC,GAhBQ,CAAT;AAkBI,sBACI;AAAA,cACShB,KAAK,CAACiB,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,kBACP;AAAA,iBACED,IAAI,CAACE,IAAL,CAAUH,GAAV,CAAc,CAACG,IAAD,EAAOD,KAAP,kBAAgB;AAAA,kBAAKC;AAAL;AAAA;AAAA;AAAA;AAAA,cAA9B,CADF,eAEE;AAAA,kBAAwBF,IAAI,CAACE,IAAL,CAAUC;AAAlC,SAASH,IAAI,CAACE,IAAL,CAAUE,EAAnB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADH;AADT;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH;;GAjCQvB,mB;;KAAAA,mB;AAmCT,eAAeA,mBAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\n\nfunction FiveDayForecastTest() {\n\n    const [users, setUsers] = useState([])\n    const [temp, setTemp] = useState([])\n\nuseEffect(() => {\naxios.get(`https://community-open-weather-map.p.rapidapi.com/forecast?q=vancouver&units=metric`, {\n    \"method\": \"GET\",\n    \"headers\": {\n        \"x-rapidapi-key\": \"e67776521cmshd88d4bf5e0c8e46p16cc0fjsn0bd91cdc12f0\",\n        \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\"\n    }\n})\n    //response.list.filter(reading => reading.dt_txt.includes(\"18:00:00\"))))\n    .then(response => {\n        const [temp] = (response.data.filter(reading => reading.dt_txt.includes(\"18:00:00\")))\n        setUsers(temp)\n    })\n    .catch(err => {\n        console.log(err.message);\n    });\n})\n\n    return (\n        <div>\n                {users.map((user, index) => (\n                    <ul>\n                     {user.list.map((list, index) =><li>{list}</li>)}\n                      <li key={user.list.dt}>{user.list.main}</li>\n            </ul>\n                            ))}\n        </div>\n    )\n}\n\nexport default FiveDayForecastTest\n"]},"metadata":{},"sourceType":"module"}