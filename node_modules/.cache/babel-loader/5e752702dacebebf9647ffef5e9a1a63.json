{"ast":null,"code":"var _jsxFileName = \"/Users/ashleywarden/Documents/projects/weather-app/src/components/Current-Weather/Forecast.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport Conditions from './Conditions';\nimport classes from './Forecast.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Forecast = initialUrl => {\n  _s();\n\n  let [city, setCity] = useState('');\n  let [responseObj, setResponseObj] = useState({});\n  const [url, setUrl] = useState(initialUrl); //because url will change every time user searches a new city\n\n  const getForecast = e => {\n    e.preventDefault();\n    setResponseObj({});\n    const uriEncodedCity = encodeURIComponent(city);\n    fetch(`https://community-open-weather-map.p.rapidapi.com/weather?units=metric&q=${uriEncodedCity}`, {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-key\": \"e67776521cmshd88d4bf5e0c8e46p16cc0fjsn0bd91cdc12f0\",\n        \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\"\n      }\n    }).then(response => response.json()).then(response => {\n      if (response.cod !== 200) {\n        throw new Error();\n      }\n\n      setResponseObj(response);\n    }).catch(err => {\n      console.log(err.message);\n    });\n  };\n\n  getForecast.defaultProps = {\n    uriEncodedCity: 'vancouver'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: getForecast,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter City\",\n        maxLength: \"50\",\n        className: classes.textInput,\n        value: city,\n        onChange: e => setCity(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.Button,\n        type: \"submit\",\n        children: \"Get Current Weather\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Conditions, {\n      responseObj: responseObj\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Forecast, \"nv9TU7f5GGh6m1rHjRY2JbwOzRQ=\");\n\n_c = Forecast;\nexport default Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/Users/ashleywarden/Documents/projects/weather-app/src/components/Current-Weather/Forecast.js"],"names":["useState","Conditions","classes","Forecast","initialUrl","city","setCity","responseObj","setResponseObj","url","setUrl","getForecast","e","preventDefault","uriEncodedCity","encodeURIComponent","fetch","then","response","json","cod","Error","catch","err","console","log","message","defaultProps","textInput","target","value","Button"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,OAAP,MAAoB,uBAApB;;;AAEA,MAAMC,QAAQ,GAAIC,UAAD,IAAgB;AAAA;;AAE7B,MAAI,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAA9B;AACA,MAAI,CAACO,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACS,GAAD,EAAMC,MAAN,IAAgBV,QAAQ,CAACI,UAAD,CAA9B,CAJ6B,CAIc;;AAG3C,QAAMO,WAAW,GAAIC,CAAD,IAAO;AAEvBA,IAAAA,CAAC,CAACC,cAAF;AACAL,IAAAA,cAAc,CAAC,EAAD,CAAd;AAGA,UAAMM,cAAc,GAAGC,kBAAkB,CAACV,IAAD,CAAzC;AAEAW,IAAAA,KAAK,CAAE,4EAA2EF,cAAe,EAA5F,EAA+F;AAChG,gBAAU,KADsF;AAEhG,iBAAW;AACP,0BAAkB,oDADX;AAEP,2BAAmB;AAFZ;AAFqF,KAA/F,CAAL,CAOCG,IAPD,CAOMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAPlB,EAQCF,IARD,CAQMC,QAAQ,IAAI;AACd,UAAIA,QAAQ,CAACE,GAAT,KAAiB,GAArB,EAA0B;AACtB,cAAM,IAAIC,KAAJ,EAAN;AACH;;AAEDb,MAAAA,cAAc,CAACU,QAAD,CAAd;AACH,KAdD,EAeCI,KAfD,CAeOC,GAAG,IAAI;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB;AACH,KAjBD;AAmBH,GA3BD;;AA6BAf,EAAAA,WAAW,CAACgB,YAAZ,GAA0B;AACtBb,IAAAA,cAAc,EAAE;AADM,GAA1B;AAIA,sBACI;AAAA,4BACI;AAAM,MAAA,QAAQ,EAAEH,WAAhB;AAAA,8BACI;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,WAAW,EAAC,YAFhB;AAGI,QAAA,SAAS,EAAC,IAHd;AAII,QAAA,SAAS,EAAET,OAAO,CAAC0B,SAJvB;AAKI,QAAA,KAAK,EAAEvB,IALX;AAMI,QAAA,QAAQ,EAAGO,CAAD,IAAON,OAAO,CAACM,CAAC,CAACiB,MAAF,CAASC,KAAV;AAN5B;AAAA;AAAA;AAAA;AAAA,cADJ,eAUI;AAAQ,QAAA,SAAS,EAAE5B,OAAO,CAAC6B,MAA3B;AAAmC,QAAA,IAAI,EAAC,QAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAaI,QAAC,UAAD;AACG,MAAA,WAAW,EAAExB;AADhB;AAAA;AAAA;AAAA;AAAA,YAbJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH,CA5DD;;GAAMJ,Q;;KAAAA,Q;AA8DN,eAAeA,QAAf","sourcesContent":["import { useState } from 'react'\nimport Conditions from './Conditions'\nimport classes from './Forecast.module.css'\n\nconst Forecast = (initialUrl) => {\n\n    let [city, setCity] = useState('')\n    let [responseObj, setResponseObj] = useState({})\n    const [url, setUrl] = useState(initialUrl) //because url will change every time user searches a new city\n\n\n    const getForecast = (e) => {\n\n        e.preventDefault()\n        setResponseObj({})\n\n\n        const uriEncodedCity = encodeURIComponent(city)\n\n        fetch(`https://community-open-weather-map.p.rapidapi.com/weather?units=metric&q=${uriEncodedCity}`, {\n            \"method\": \"GET\",\n            \"headers\": {\n                \"x-rapidapi-key\": \"e67776521cmshd88d4bf5e0c8e46p16cc0fjsn0bd91cdc12f0\",\n                \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\"\n            }\n        })\n        .then(response => response.json())\n        .then(response => {\n            if (response.cod !== 200) {\n                throw new Error()\n            }\n    \n            setResponseObj(response);\n        })\n        .catch(err => {\n            console.log(err.message);\n        });\n\n    }\n\n    getForecast.defaultProps ={\n        uriEncodedCity: 'vancouver'\n    }\n\n    return (\n        <div>\n            <form onSubmit={getForecast}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Enter City\"\n                    maxLength=\"50\"\n                    className={classes.textInput}\n                    value={city}\n                    onChange={(e) => setCity(e.target.value)}\n                    />\n\n                <button className={classes.Button} type=\"submit\">Get Current Weather</button>\n            </form>\n            <Conditions\n               responseObj={responseObj}\n               />\n            \n        </div>\n    )\n}\n\nexport default Forecast\n"]},"metadata":{},"sourceType":"module"}